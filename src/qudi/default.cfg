#  Example Qudi configuration file.
#  The recommended path for user specific files is C:\Users\<user_name>\qudi\config

global:
    # list of modules to load when starting
    startup_modules: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861

    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'

    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    # default_data_dir: C:\Users\neverhorst\qudi\Data

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

gui:

    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_logic

    scanner:
        module.Class: 'scanner.scanner.ScannerGui'
        options:
            image_axes_padding: 0.02
            default_position_unit_prefix: null  # optional, use unit prefix characters, e.g. 'u' or 'n'
        connect:
            scanning_logic: scanner_logic
            data_logic: scanner_data_logic
            optimize_logic: scanner_optimize_logic

    poi_manager_gui:
        module.Class: 'poimanager.poimanagergui.PoiManagerGui'
        options:
            data_scan_axes: xy  #optional, default: xy
        connect:
            poi_manager_logic: 'poi_manager_logic'

    swicthes_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'
        options:
            switch_style: 0

    motor_gui:
        module.Class: 'motor.motor_gui.MotorGui'
        connect:
            motor_logic: 'motor_logic'

logic:

    time_series_logic:
        module.Class: 'time_series_logic.TimeSeriesLogic'
        options:
            max_frame_rate: 20  # optional (default: 20Hz)
            channel_buffer_size: 1048576  # optional (default: 1MSample)
            max_raw_data_bytes: 1073741824  # optional (default: 1GB)
        connect:
            streamer: instream_dummy

    motor_logic:
        module.Class: 'motor_logic.MotorLogic'
        connect:
            motor: 'motor_dummy'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        options:
            watchdog_interval: 1  # optional
            autostart_watchdog: True  # optional
        connect:
            switch: 'switch_combiner'

    scanner_logic:
        module.Class: 'scanner_logic.ScannerLogic'
        options:
            max_history_length: 20
            max_scan_update_interval: 2
            position_update_interval: 1
        connect:
            scanner: scanner_dummy

    scanner_data_logic:
        module.Class: 'scanner_data_logic.ScannerDataLogic'
        options:
            max_history_length: 20
        connect:
            scan_logic: scanner_logic

    scanner_optimize_logic:
        module.Class: 'scanner_optimize_logic.ScannerOptimizeLogic'
        connect:
            scan_logic: scanner_logic

    poi_manager_logic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scanning_logic: 'scanner_logic'
            optimize_logic: 'scanner_optimize_logic'
            data_logic: 'scanner_data_logic'

hardware:

    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        options:
            channel_names:
                - 'digital 1'
                - 'analog 1'
                - 'analog 2'
                - 'digital 2'
            channel_units:
                - 'Hz'
                - 'V'
                - 'V'
                - 'Hz'
            channel_signals:  # Can be 'counts' or 'sine'
                - 'counts'
                - 'sine'
                - 'sine'
                - 'counts'
            data_type: 'float64'
            sample_timing: 'CONSTANT'  # Can be 'CONSTANT', 'TIMESTAMP' or 'RANDOM'

    fastcounter_dummy:
        module.Class: 'fast_counter_dummy.FastCounterDummy'
        options:
            gated: False
            #load_trace: None # path to the saved dummy trace

    motor_dummy:
        module.Class: 'dummy.motor_dummy.MotorDummy'

    switch_combiner:
        module.Class: 'switch_combiner_interfuse.SwitchCombinerInterfuse'
        connect:
            switch1: switch_1
            switch2: switch_2
        options:
            name: combined_switches  # optional name of the combined hardware

    switch_1:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        options:
            name: 'First'  # optional
            remember_states: True  # optional
            switches:
                btn1: ['down', 'up']
                btn2: ['low', 'middle', 'high']

    switch_2:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        options:
            name: 'First'  # optional
            remember_states: True  # optional
            switches:
                btn3: ['down', 'up']
                btn4: ['low', 'middle', 'high']

    scanner_dummy:
        module.Class: 'dummy.scanner_dummy.ScannerDummy'
        options:
            position_ranges:
                'x': [0, 200e-6]
                'y': [0, 200e-6]
                'z': [-100e-6, 100e-6]
            frequency_ranges:
                'x': [0, 10000]
                'y': [0, 10000]
                'z': [0, 5000]
            resolution_ranges:
                'x': [2, 2147483647]
                'y': [2, 2147483647]
                'z': [2, 2147483647]
            position_accuracy:
                'x': 10e-9
                'y': 10e-9
                'z': 50e-9
            spot_density: 1e9
            spot_size_dist: [4e-6, 100e-9]
